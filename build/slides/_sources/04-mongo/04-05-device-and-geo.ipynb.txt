{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pymongo import MongoClient\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "mongo_client = MongoClient('18.236.138.158', 27016)\n",
    "database_reference = mongo_client.twitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mongo_aggregation_verbs import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "collection_reference = database_reference.instructor_test_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "collection_reference.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "INSTAGRAM = '<a href=\"http://instagram.com\" rel=\"nofollow\">Instagram</a>'\n",
    "source_is_instagram = { 'source' : INSTAGRAM }\n",
    "source_is_not_instagram = { 'source' : {'$ne' : INSTAGRAM } } "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1907, 18093)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(collection_reference.find(source_is_instagram).count(),\n",
    " collection_reference.find(source_is_not_instagram).count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tweet Locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "not_null = { '$ne' : None }\n",
    "nonnull_geo = {'geo' : not_null }\n",
    "keep_geo_and_text = { 'geo' : 1, 'text' : 1 , '_id' : 0}\n",
    "\n",
    "match_insta = {\n",
    "    MATCH : source_is_instagram\n",
    "}\n",
    "\n",
    "match_not_insta = {\n",
    "    MATCH : source_is_not_instagram\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'geo': 1907}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    { COUNT : \"geo\"}\n",
    "])\n",
    "next(cursor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'geo': 1045}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_not_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    { COUNT : \"geo\"}\n",
    "])\n",
    "next(cursor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def group_and_count(key):\n",
    "    return { GROUP : {\n",
    "                 \"_id\"   : key,\n",
    "                 \"count\" : { \"$sum\" : 1 }\n",
    "                }\n",
    "           }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_geo_from_tweets(tweets):\n",
    "    tweets = pd.DataFrame(tweets)\n",
    "    geo = pd.DataFrame(list(tweets['_id'].values))\n",
    "    geo['count'] = tweets['count']\n",
    "    return geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coordinates</th>\n",
       "      <th>type</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[34.0522342, -118.2436849]</td>\n",
       "      <td>Point</td>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[37.3813444, -122.1802812]</td>\n",
       "      <td>Point</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[34.1425078, -118.255075]</td>\n",
       "      <td>Point</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[36.778261, -119.4179324]</td>\n",
       "      <td>Point</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[35.426667, -116.89]</td>\n",
       "      <td>Point</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>[34.0508369, -118.263032]</td>\n",
       "      <td>Point</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>[34.0194543, -118.4911912]</td>\n",
       "      <td>Point</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  coordinates   type  count\n",
       "0  [34.0522342, -118.2436849]  Point    206\n",
       "1  [37.3813444, -122.1802812]  Point     39\n",
       "2   [34.1425078, -118.255075]  Point     31\n",
       "3   [36.778261, -119.4179324]  Point     21\n",
       "4        [35.426667, -116.89]  Point     17\n",
       "5   [34.0508369, -118.263032]  Point     16\n",
       "6  [34.0194543, -118.4911912]  Point     15"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_not_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    group_and_count('$geo'),\n",
    "    { MATCH : { \"count\" : { \"$gt\" : 14 } } }, \n",
    "    { SORT  : { \"count\" : -1 } }\n",
    "])\n",
    "not_insta = parse_geo_from_tweets(list(cursor))\n",
    "not_insta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coordinates</th>\n",
       "      <th>type</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[34.0522, -118.243]</td>\n",
       "      <td>Point</td>\n",
       "      <td>465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[36.48863024, -119.72972051]</td>\n",
       "      <td>Point</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[34.09799334, -118.33866453]</td>\n",
       "      <td>Point</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[34.07305556, -118.39944444]</td>\n",
       "      <td>Point</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[34.0221, -118.481]</td>\n",
       "      <td>Point</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>[34.0402214, -118.2545227]</td>\n",
       "      <td>Point</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>[33.9442368, -118.3975983]</td>\n",
       "      <td>Point</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    coordinates   type  count\n",
       "0           [34.0522, -118.243]  Point    465\n",
       "1  [36.48863024, -119.72972051]  Point     37\n",
       "2  [34.09799334, -118.33866453]  Point     35\n",
       "3  [34.07305556, -118.39944444]  Point     29\n",
       "4           [34.0221, -118.481]  Point     27\n",
       "5    [34.0402214, -118.2545227]  Point     16\n",
       "6    [33.9442368, -118.3975983]  Point     15"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    group_and_count('$geo'),\n",
    "    { MATCH : { \"count\" : { \"$gt\" : 14 } } }, \n",
    "    { SORT  : { \"count\" : -1 } }\n",
    "])\n",
    "insta = parse_geo_from_tweets(list(cursor))\n",
    "insta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import folium\n",
    "starting_loc = [34.0689, -118.4452]\n",
    "la_map = folium.Map(location=starting_loc, zoom_start=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "for loc, count in not_insta[['coordinates','count']].values:\n",
    "    popup = folium.Popup(str(count), parse_html=True)\n",
    "    folium.Marker(loc, popup=popup, icon=folium.Icon(color='red')).add_to(la_map)\n",
    "for loc, count in insta[['coordinates','count']].values:\n",
    "    popup = folium.Popup(str(count), parse_html=True)\n",
    "    folium.Marker(loc, popup=popup, icon=folium.Icon(color='blue')).add_to(la_map)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7ffa7de7e1d0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "la_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_geo_from_tweets(tweets):\n",
    "    tweets = pd.DataFrame(tweets)\n",
    "    geo = pd.DataFrame(list(tweets['_id'].values))\n",
    "    geo['count'] = tweets['count']\n",
    "    return geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4549072827</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>787687147</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1414684496</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3066057658</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>789990810</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4191239027</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>21298660</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3864064936</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21298373</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3380828067</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          _id  count\n",
       "0  4549072827     29\n",
       "1   787687147     29\n",
       "2  1414684496     27\n",
       "3  3066057658     27\n",
       "4   789990810     27\n",
       "5  4191239027     25\n",
       "6    21298660     21\n",
       "7  3864064936     19\n",
       "8    21298373     19\n",
       "9  3380828067     17"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_not_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    group_and_count('$user.id'),\n",
    "    { MATCH : { \"count\" : { \"$gt\" : 14 } } }, \n",
    "    { SORT  : { \"count\" : -1 } },\n",
    "    { LIMIT : 10 }\n",
    "])\n",
    "not_insta_top_users = pd.DataFrame(list(cursor))\n",
    "not_insta_top_users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1455659006</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>613833206</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>843390093012353024</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4561143733</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19640448</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>226456467</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>37016954</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>760160463833313280</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>30723561</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2267807461</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  _id  count\n",
       "0          1455659006     10\n",
       "1           613833206      8\n",
       "2  843390093012353024      6\n",
       "3          4561143733      6\n",
       "4            19640448      5\n",
       "5           226456467      5\n",
       "6            37016954      4\n",
       "7  760160463833313280      4\n",
       "8            30723561      4\n",
       "9          2267807461      4"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    group_and_count('$user.id'),\n",
    "#     { MATCH : { \"count\" : { \"$gt\" : 10 } } }, \n",
    "    { SORT  : { \"count\" : -1 } },\n",
    "    { LIMIT : 10 }\n",
    "])\n",
    "insta_top_users = pd.DataFrame(list(cursor))\n",
    "insta_top_users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "not_insta_top_users_ids = not_insta_top_users._id.values\n",
    "insta_top_users_ids = insta_top_users._id.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "not_insta_top_users_ids_list = list(not_insta_top_users_ids)\n",
    "not_insta_top_users_ids_list = [int(i) for i in not_insta_top_users_ids_list]\n",
    "insta_top_users_ids_list = list(insta_top_users_ids)\n",
    "insta_top_users_ids_list = [int(i) for i in insta_top_users_ids_list]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_geo_from_tweets(tweets):\n",
    "    tweets = pd.DataFrame(tweets)\n",
    "    tmp = pd.DataFrame(list(tweets['_id'].values))\n",
    "    geo = pd.DataFrame(list(tmp['geo'].values))\n",
    "    geo['user_id'] = tmp['user_id']\n",
    "    geo['count'] = tweets['count']\n",
    "    return geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_not_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    { PROJECT : { \"user_id\" : \"$user.id\", \"geo\" : 1, \"text\" : 1, \"_id\" :0 } },\n",
    "    { MATCH : { \"user_id\" : { \"$in\" : not_insta_top_users_ids_list }}},\n",
    "    group_and_count({\"user_id\" : \"$user_id\", \"geo\" : \"$geo\"}),\n",
    "])\n",
    "\n",
    "not_insta_top_user_geo = parse_geo_from_tweets(list(cursor))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor = collection_reference.aggregate([\n",
    "    { MATCH : source_is_instagram },\n",
    "    { MATCH : nonnull_geo},\n",
    "    { PROJECT : { \"user_id\" : \"$user.id\", \"geo\" : 1, \"text\" : 1, \"_id\" :0 } },\n",
    "    { MATCH : { \"user_id\" : { \"$in\" : insta_top_users_ids_list }}},\n",
    "    group_and_count({\"user_id\" : \"$user_id\", \"geo\" : \"$geo\"}),\n",
    "])\n",
    "insta_top_user_geo = parse_geo_from_tweets(list(cursor))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coordinates</th>\n",
       "      <th>type</th>\n",
       "      <th>user_id</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[34.19743613, -118.58178967]</td>\n",
       "      <td>Point</td>\n",
       "      <td>4549072827</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[34.03491, -118.27746]</td>\n",
       "      <td>Point</td>\n",
       "      <td>4191239027</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[35.7476654, -118.060997]</td>\n",
       "      <td>Point</td>\n",
       "      <td>1414684496</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[34.0995, -118.32813]</td>\n",
       "      <td>Point</td>\n",
       "      <td>4191239027</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[34.187044, -118.3812562]</td>\n",
       "      <td>Point</td>\n",
       "      <td>789990810</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    coordinates   type     user_id  count\n",
       "0  [34.19743613, -118.58178967]  Point  4549072827      1\n",
       "1        [34.03491, -118.27746]  Point  4191239027      1\n",
       "2     [35.7476654, -118.060997]  Point  1414684496      1\n",
       "3         [34.0995, -118.32813]  Point  4191239027      1\n",
       "4     [34.187044, -118.3812562]  Point   789990810      1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not_insta_top_user_geo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coordinates</th>\n",
       "      <th>type</th>\n",
       "      <th>user_id</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[34.04453451, -118.26677639]</td>\n",
       "      <td>Point</td>\n",
       "      <td>226456467</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[34.06895637, -118.40267947]</td>\n",
       "      <td>Point</td>\n",
       "      <td>1455659006</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[34.0221, -118.481]</td>\n",
       "      <td>Point</td>\n",
       "      <td>1455659006</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[34.07305556, -118.39944444]</td>\n",
       "      <td>Point</td>\n",
       "      <td>1455659006</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[34.08718311, -118.46354276]</td>\n",
       "      <td>Point</td>\n",
       "      <td>19640448</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    coordinates   type     user_id  count\n",
       "0  [34.04453451, -118.26677639]  Point   226456467      1\n",
       "1  [34.06895637, -118.40267947]  Point  1455659006      1\n",
       "2           [34.0221, -118.481]  Point  1455659006      1\n",
       "3  [34.07305556, -118.39944444]  Point  1455659006      5\n",
       "4  [34.08718311, -118.46354276]  Point    19640448      1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "insta_top_user_geo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "colors_insta = {\n",
    "    760160463833313280 : 'red',\n",
    "    30723561 : 'blue',\n",
    "    613833206 : 'green',\n",
    "    2267807461 : 'purple',\n",
    "    4561143733 : 'orange',\n",
    "    1455659006 : 'darkred',\n",
    "    37016954 : 'lightred',\n",
    "    19640448 : 'beige',\n",
    "    843390093012353024 : 'darkblue',\n",
    "    226456467 : 'darkgreen',\n",
    "}\n",
    "\n",
    "# colors_insta = {\n",
    "#     760160463833313280 : '#0000ff',\n",
    "#     30723561 : '#0010ff',\n",
    "#     613833206 : '#0020ff',\n",
    "#     2267807461 : '#0030ff',\n",
    "#     4561143733 : '#0040ff',\n",
    "#     1455659006 : '#0050ff',\n",
    "#     37016954 : '#0060ff',\n",
    "#     19640448 : '#0070ff',\n",
    "#     843390093012353024 : '#0080ff',\n",
    "#     226456467 : '#0090ff',\n",
    "# }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# not_insta_top_user_geo['color'] = not_insta_top_user_geo.user_id.apply(lambda x: colors_not_insta[x])\n",
    "insta_top_user_geo['color'] = insta_top_user_geo.user_id.apply(lambda x: colors_insta[x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coordinates</th>\n",
       "      <th>type</th>\n",
       "      <th>user_id</th>\n",
       "      <th>count</th>\n",
       "      <th>color</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>[34.0304, -118.779]</td>\n",
       "      <td>Point</td>\n",
       "      <td>2267807461</td>\n",
       "      <td>1</td>\n",
       "      <td>purple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[34.0221, -118.481]</td>\n",
       "      <td>Point</td>\n",
       "      <td>1455659006</td>\n",
       "      <td>1</td>\n",
       "      <td>darkred</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>[34.0981334, -118.32668656]</td>\n",
       "      <td>Point</td>\n",
       "      <td>4561143733</td>\n",
       "      <td>2</td>\n",
       "      <td>orange</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>[34.0522, -118.243]</td>\n",
       "      <td>Point</td>\n",
       "      <td>2267807461</td>\n",
       "      <td>2</td>\n",
       "      <td>purple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>[34.06635491, -118.41345382]</td>\n",
       "      <td>Point</td>\n",
       "      <td>19640448</td>\n",
       "      <td>1</td>\n",
       "      <td>beige</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>[34.122322, -118.223444]</td>\n",
       "      <td>Point</td>\n",
       "      <td>760160463833313280</td>\n",
       "      <td>4</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>[33.7358, -118.291]</td>\n",
       "      <td>Point</td>\n",
       "      <td>226456467</td>\n",
       "      <td>4</td>\n",
       "      <td>darkgreen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>[34.07517256, -118.35229982]</td>\n",
       "      <td>Point</td>\n",
       "      <td>2267807461</td>\n",
       "      <td>1</td>\n",
       "      <td>purple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>[34.0567207, -118.4424515]</td>\n",
       "      <td>Point</td>\n",
       "      <td>19640448</td>\n",
       "      <td>1</td>\n",
       "      <td>beige</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>[34.0522, -118.243]</td>\n",
       "      <td>Point</td>\n",
       "      <td>30723561</td>\n",
       "      <td>4</td>\n",
       "      <td>blue</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     coordinates   type             user_id  count      color\n",
       "14           [34.0304, -118.779]  Point          2267807461      1     purple\n",
       "2            [34.0221, -118.481]  Point          1455659006      1    darkred\n",
       "5    [34.0981334, -118.32668656]  Point          4561143733      2     orange\n",
       "12           [34.0522, -118.243]  Point          2267807461      2     purple\n",
       "19  [34.06635491, -118.41345382]  Point            19640448      1      beige\n",
       "7       [34.122322, -118.223444]  Point  760160463833313280      4        red\n",
       "21           [33.7358, -118.291]  Point           226456467      4  darkgreen\n",
       "11  [34.07517256, -118.35229982]  Point          2267807461      1     purple\n",
       "15    [34.0567207, -118.4424515]  Point            19640448      1      beige\n",
       "9            [34.0522, -118.243]  Point            30723561      4       blue"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "insta_top_user_geo.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "starting_loc = [34.0689, -118.4452]\n",
    "la_map = folium.Map(location=starting_loc, zoom_start=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "for loc, color, count in insta_top_user_geo[['coordinates','color','count']].values:\n",
    "    popup = folium.Popup(str(count), parse_html=True)\n",
    "    if count < 3:\n",
    "        folium.Marker(loc, popup=popup, icon=folium.Icon(color=color)).add_to(la_map)\n",
    "#     else:\n",
    "#         folium.Marker(loc, popup=popup, icon=folium.Icon(color=color, icon='warning')).add_to(la_map)\n",
    "# for loc, count in insta[['coordinates','count']].values:\n",
    "#     folium.Marker(loc, popup=popup, icon=folium.Icon(color='blue')).add_to(la_map)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7ffa7654c1d0>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "la_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    760160463833313280 : 'red',\n",
    "    30723561 : 'blue',\n",
    "    613833206 : 'green',\n",
    "    2267807461 : 'purple',\n",
    "    4561143733 : 'orange',\n",
    "    1455659006 : 'darkred',\n",
    "    37016954 : 'lightred',\n",
    "    19640448 : 'beige',\n",
    "    843390093012353024 : 'darkblue',\n",
    "    226456467 : 'darkgreen',"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Thanks for the support • Be A Leader • Shop &amp;a...</td>\n",
       "      <td>{'id': 37016954, 'id_str': '37016954', 'name':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>They’ll quit on themselves to find excuses to ...</td>\n",
       "      <td>{'id': 37016954, 'id_str': '37016954', 'name':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Thanks for the support • The latest singles fr...</td>\n",
       "      <td>{'id': 37016954, 'id_str': '37016954', 'name':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Thanks for the support • The latest singles fr...</td>\n",
       "      <td>{'id': 37016954, 'id_str': '37016954', 'name':...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  Thanks for the support • Be A Leader • Shop &a...   \n",
       "1  They’ll quit on themselves to find excuses to ...   \n",
       "2  Thanks for the support • The latest singles fr...   \n",
       "3  Thanks for the support • The latest singles fr...   \n",
       "\n",
       "                                                user  \n",
       "0  {'id': 37016954, 'id_str': '37016954', 'name':...  \n",
       "1  {'id': 37016954, 'id_str': '37016954', 'name':...  \n",
       "2  {'id': 37016954, 'id_str': '37016954', 'name':...  \n",
       "3  {'id': 37016954, 'id_str': '37016954', 'name':...  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cur = collection_reference.find({\"user.id\" : 37016954})\n",
    "tw = list(cur)\n",
    "pd.DataFrame(tw)[['text', 'user']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
